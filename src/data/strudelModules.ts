// src/data/strudelModules.ts - Strudel-based progression system
import { Module } from '../types';

export const STRUDEL_MODULES: { [id: string]: Module } = {
  // === PHASE 1: FIRST SOUNDS (0-100 Beats) ===
  'bd_basic': {
    id: 'bd_basic',
    name: 'Kick Drum (bd)',
    type: 'sample',
    baseCost: 10,
    bpsPerUnit: 0.1,
    acquiredCount: 0,
    description: 'Basic kick drum - the foundation of electronic music. Learns: sound("bd")',
    unlocked: true,
    consumption: { ram: 10, cpu: 0, dsp: 0, storage: 5 },
    outputBoosts: { excitement: 0.01 },
  },
  'hh_basic': {
    id: 'hh_basic',
    name: 'Hi-Hat (hh)',
    type: 'sample',
    baseCost: 25,
    bpsPerUnit: 0.15,
    acquiredCount: 0,
    description: 'Crisp hi-hat sound. Learns: sound("hh")',
    unlocked: false,
    consumption: { ram: 8, cpu: 0, dsp: 0, storage: 4 },
    outputBoosts: { excitement: 0.015 },
  },
  'sd_basic': {
    id: 'sd_basic',
    name: 'Snare Drum (sd)',
    type: 'sample',
    baseCost: 40,
    bpsPerUnit: 0.2,
    acquiredCount: 0,
    description: 'Sharp snare drum. Learns: sound("sd")',
    unlocked: false,
    consumption: { ram: 12, cpu: 0, dsp: 0, storage: 6 },
    outputBoosts: { excitement: 0.02 },
  },
  'oh_basic': {
    id: 'oh_basic',
    name: 'Open Hat (oh)',
    type: 'sample',
    baseCost: 60,
    bpsPerUnit: 0.18,
    acquiredCount: 0,
    description: 'Open hi-hat for rhythm. Learns: sound("oh")',
    unlocked: false,
    consumption: { ram: 10, cpu: 0, dsp: 0, storage: 5 },
    outputBoosts: { excitement: 0.018 },
  },
  'sample_variations': {
    id: 'sample_variations',
    name: 'Sample Variations',
    type: 'refactor',
    baseCost: 80,
    bpsPerUnit: 0,
    acquiredCount: 0,
    description: 'Unlock sample variations like bd:1, bd:2. Learns: sound("bd:1")',
    unlocked: false,
    consumption: { ram: 5, cpu: 1, dsp: 0, storage: 3 },
    outputBoosts: { complexity: 0.05 },
  },

  // === PHASE 2: MINI-NOTATION BASICS (100-500 Beats) ===
  'sequence_builder': {
    id: 'sequence_builder',
    name: 'Sequence Builder',
    type: 'refactor',
    baseCost: 120,
    bpsPerUnit: 0,
    acquiredCount: 0,
    description: 'Combine sounds in sequences. Learns: sound("bd hh sd hh")',
    unlocked: false,
    consumption: { ram: 15, cpu: 2, dsp: 0, storage: 8 },
    outputBoosts: { cohesion: 0.1, complexity: 0.05 },
  },
  'rest_notes': {
    id: 'rest_notes',
    name: 'Rest Notes (~)',
    type: 'refactor',
    baseCost: 150,
    bpsPerUnit: 0,
    acquiredCount: 0,
    description: 'Add silence to patterns. Learns: sound("bd ~ sd ~")',
    unlocked: false,
    consumption: { ram: 10, cpu: 1, dsp: 0, storage: 5 },
    outputBoosts: { cohesion: 0.08 },
  },
  'speed_multiplier': {
    id: 'speed_multiplier',
    name: 'Speed Multiplier (*)',
    type: 'refactor',
    baseCost: 200,
    bpsPerUnit: 0,
    acquiredCount: 0,
    description: 'Make patterns faster. Learns: sound("bd*2")',
    unlocked: false,
    consumption: { ram: 12, cpu: 2, dsp: 0, storage: 6 },
    outputBoosts: { excitement: 0.1 },
  },
  'slow_division': {
    id: 'slow_division',
    name: 'Slow Division (/)',
    type: 'refactor',
    baseCost: 180,
    bpsPerUnit: 0,
    acquiredCount: 0,
    description: 'Make patterns slower. Learns: sound("bd/2")',
    unlocked: false,
    consumption: { ram: 8, cpu: 1, dsp: 0, storage: 4 },
    outputBoosts: { cohesion: 0.06 },
  },

  // === PHASE 3: ADVANCED NOTATION (500-1500 Beats) ===
  'sub_sequences': {
    id: 'sub_sequences',
    name: 'Sub-sequences [ ]',
    type: 'refactor',
    baseCost: 300,
    bpsPerUnit: 0,
    acquiredCount: 0,
    description: 'Nested rhythm patterns. Learns: sound("bd [hh hh] sd")',
    unlocked: false,
    consumption: { ram: 20, cpu: 3, dsp: 0, storage: 10 },
    outputBoosts: { complexity: 0.15 },
  },
  'nested_patterns': {
    id: 'nested_patterns',
    name: 'Nested Patterns [[ ]]',
    type: 'refactor',
    baseCost: 450,
    bpsPerUnit: 0,
    acquiredCount: 0,
    description: 'Double-nested rhythms. Learns: sound("bd [hh [oh oh]]")',
    unlocked: false,
    consumption: { ram: 25, cpu: 4, dsp: 0, storage: 12 },
    outputBoosts: { complexity: 0.2 },
  },
  'polyphony': {
    id: 'polyphony',
    name: 'Polyphony (,)',
    type: 'refactor',
    baseCost: 400,
    bpsPerUnit: 0,
    acquiredCount: 0,
    description: 'Play sounds together. Learns: sound("[bd,hh] [sd,oh]")',
    unlocked: false,
    consumption: { ram: 30, cpu: 3, dsp: 1, storage: 15 },
    outputBoosts: { excitement: 0.15, complexity: 0.1 },
  },
  'cycling_patterns': {
    id: 'cycling_patterns',
    name: 'Cycling Patterns < >',
    type: 'refactor',
    baseCost: 350,
    bpsPerUnit: 0,
    acquiredCount: 0,
    description: 'Cycling through patterns. Learns: sound("<bd hh sd oh>")',
    unlocked: false,
    consumption: { ram: 18, cpu: 2, dsp: 0, storage: 9 },
    outputBoosts: { cohesion: 0.12 },
  },

  // === PHASE 4: MELODIC ELEMENTS (1500-3000 Beats) ===
  'note_c': {
    id: 'note_c',
    name: 'Note C',
    type: 'synth',
    baseCost: 500,
    bpsPerUnit: 0.4,
    acquiredCount: 0,
    description: 'Basic musical note. Learns: note("c")',
    unlocked: false,
    consumption: { ram: 25, cpu: 2, dsp: 1, storage: 12 },
    outputBoosts: { complexity: 0.1 },
  },
  'note_scale': {
    id: 'note_scale',
    name: 'C Major Scale',
    type: 'synth',
    baseCost: 800,
    bpsPerUnit: 0.6,
    acquiredCount: 0,
    description: 'Complete major scale. Learns: note("c d e f g a b")',
    unlocked: false,
    consumption: { ram: 35, cpu: 3, dsp: 2, storage: 18 },
    outputBoosts: { complexity: 0.2, excitement: 0.1 },
  },
  'octave_control': {
    id: 'octave_control',
    name: 'Octave Control',
    type: 'refactor',
    baseCost: 600,
    bpsPerUnit: 0,
    acquiredCount: 0,
    description: 'Control note octaves. Learns: note("c3 e4 g5")',
    unlocked: false,
    consumption: { ram: 20, cpu: 2, dsp: 1, storage: 10 },
    outputBoosts: { complexity: 0.15 },
  },
  'chord_triads': {
    id: 'chord_triads',
    name: 'Chord Triads',
    type: 'synth',
    baseCost: 1000,
    bpsPerUnit: 0.8,
    acquiredCount: 0,
    description: 'Three-note chords. Learns: note("c e g")',
    unlocked: false,
    consumption: { ram: 40, cpu: 4, dsp: 3, storage: 20 },
    outputBoosts: { excitement: 0.2, cohesion: 0.15 },
  },

  // === PHASE 5: SOUND SHAPING (3000-6000 Beats) ===
  'reverb_engine': {
    id: 'reverb_engine',
    name: 'Reverb Engine',
    type: 'effect',
    baseCost: 1200,
    bpsPerUnit: 0.3,
    acquiredCount: 0,
    description: 'Add spatial depth. Learns: .room(0.5)',
    unlocked: false,
    consumption: { ram: 30, cpu: 3, dsp: 4, storage: 15 },
    outputBoosts: { excitement: 0.12, cohesion: 0.2 },
  },
  'delay_unit': {
    id: 'delay_unit',
    name: 'Delay Unit',
    type: 'effect',
    baseCost: 1400,
    bpsPerUnit: 0.35,
    acquiredCount: 0,
    description: 'Echo and repeat effects. Learns: .delay(0.25)',
    unlocked: false,
    consumption: { ram: 35, cpu: 4, dsp: 5, storage: 18 },
    outputBoosts: { excitement: 0.15, complexity: 0.1 },
  },
  'filter_bank': {
    id: 'filter_bank',
    name: 'Filter Bank',
    type: 'effect',
    baseCost: 1600,
    bpsPerUnit: 0.4,
    acquiredCount: 0,
    description: 'Shape frequency content. Learns: .lpf(800)',
    unlocked: false,
    consumption: { ram: 40, cpu: 5, dsp: 6, storage: 20 },
    outputBoosts: { excitement: 0.18, complexity: 0.15 },
  },

  // === PHASE 6: RHYTHM COMPLEXITY (6000-10000 Beats) ===
  'euclidean_engine': {
    id: 'euclidean_engine',
    name: 'Euclidean Engine',
    type: 'refactor',
    baseCost: 2000,
    bpsPerUnit: 0,
    acquiredCount: 0,
    description: 'Mathematical rhythm distribution. Learns: sound("bd(3,8)")',
    unlocked: false,
    consumption: { ram: 50, cpu: 6, dsp: 2, storage: 25 },
    outputBoosts: { complexity: 0.3, excitement: 0.2 },
  },
  'polyrhythm_generator': {
    id: 'polyrhythm_generator',
    name: 'Polyrhythm Generator',
    type: 'refactor',
    baseCost: 2500,
    bpsPerUnit: 0,
    acquiredCount: 0,
    description: 'Multiple time signatures together. Advanced rhythmic complexity.',
    unlocked: false,
    consumption: { ram: 60, cpu: 8, dsp: 3, storage: 30 },
    outputBoosts: { complexity: 0.4, excitement: 0.25 },
  },

  // === PHASE 7: SYNTHESIS (10000-20000 Beats) ===
  'oscillator_bank': {
    id: 'oscillator_bank',
    name: 'Oscillator Bank',
    type: 'synth',
    baseCost: 3000,
    bpsPerUnit: 1.2,
    acquiredCount: 0,
    description: 'Synthesize your own sounds. Learns: s("sawtooth"), s("sine")',
    unlocked: false,
    consumption: { ram: 80, cpu: 10, dsp: 8, storage: 40 },
    outputBoosts: { excitement: 0.3, complexity: 0.25 },
  },
  'wavetable_synth': {
    id: 'wavetable_synth',
    name: 'Wavetable Synth',
    type: 'synth',
    baseCost: 4000,
    bpsPerUnit: 1.5,
    acquiredCount: 0,
    description: 'Advanced waveform synthesis for complex timbres.',
    unlocked: false,
    consumption: { ram: 100, cpu: 12, dsp: 10, storage: 50 },
    outputBoosts: { excitement: 0.4, complexity: 0.35 },
  },

  // === PHASE 8: LIVE CODING MASTERY (20000+ Beats) ===
  'ai_composer': {
    id: 'ai_composer',
    name: 'AI Composer',
    type: 'refactor',
    baseCost: 10000,
    bpsPerUnit: 0,
    acquiredCount: 0,
    description: 'Algorithmic music generation. The ultimate Strudel mastery.',
    unlocked: false,
    consumption: { ram: 200, cpu: 20, dsp: 15, storage: 100 },
    outputBoosts: { excitement: 1.0, complexity: 1.0, cohesion: 0.5 },
  },
};

// Function to get modules by phase
export function getModulesByPhase(phase: number): Module[] {
  const phaseRanges = [
    { min: 0, max: 100, modules: ['bd_basic', 'hh_basic', 'sd_basic', 'oh_basic', 'sample_variations'] },
    { min: 100, max: 500, modules: ['sequence_builder', 'rest_notes', 'speed_multiplier', 'slow_division'] },
    { min: 500, max: 1500, modules: ['sub_sequences', 'nested_patterns', 'polyphony', 'cycling_patterns'] },
    { min: 1500, max: 3000, modules: ['note_c', 'note_scale', 'octave_control', 'chord_triads'] },
    { min: 3000, max: 6000, modules: ['reverb_engine', 'delay_unit', 'filter_bank'] },
    { min: 6000, max: 10000, modules: ['euclidean_engine', 'polyrhythm_generator'] },
    { min: 10000, max: 20000, modules: ['oscillator_bank', 'wavetable_synth'] },
    { min: 20000, max: Infinity, modules: ['ai_composer'] },
  ];

  const currentPhase = phaseRanges[phase] || phaseRanges[0];
  return currentPhase.modules.map(id => STRUDEL_MODULES[id]);
}